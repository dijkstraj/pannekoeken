var paths = [];
var path = [];
var gridSize = 25;
var offsetLeft = 3;
var offsetTop = 1;
function moveTo(x, y) { path = [[(x + offsetLeft) * gridSize, (y + offsetTop) * gridSize]]; }
function move(dx, dy) { path.push([path[path.length - 1][0] + dx * gridSize, path[path.length - 1][1] + dy * gridSize]); }
function left(blocks) { move(-(blocks || 1), 0); }
function right(blocks) { move(blocks || 1, 0); }
function up(blocks) { move(0, -(blocks || 1)); }
function down(blocks) { move(0, blocks || 1); }

// warming up
moveTo(-1, 1);
right(2);
paths.push(path);

// star
moveTo(0, 5);
right(4);
up();
right();
up(2);
right();
up(2);
right(2);
down(2);
right();
down(2);
right();
down();
right(4);
down(2);
left();
down();
left();
down();
left();
down(2);
right();
down(3);
right();
down(2);
left(2);
up();
left();
up();
left(2);
up();
left(2);
down();
left(2);
down();
left();
down();
left(2);
up(2);
right();
up(3);
right();
up(2);
left();
up();
left();
up();
left();
up(2);
paths.push(path);

//  eyes
moveTo(5.5, 6);
down(3);
paths.push(path);

moveTo(8.5, 6);
down(3);
paths.push(path);


JSON.stringify([['Layer',{applyMatrix: true}],['Layer',{applyMatrix: true,children:paths.map(function(path) { return ['Path',{applyMatrix: true, pivot: [0,0], data: {color: 0, isPolygonal: true}, segments: path, strokeColor: [1, 0.91765, 0.49412], strokeWidth: 5, strokeCap: 'round', miterLimit: 1}]; })}]]);